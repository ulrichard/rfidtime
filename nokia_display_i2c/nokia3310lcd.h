/*
 * Description  :  This is header file for graphic LCD found in Nokia phones.
 *                 Using the arduino SPI lib. The following pins are used:
 *                 13  sclk -> serial clock
 *                 12  miso -> 
 *                 11  mosi -> serial data from arduino to LCD
 *                 10  ss   -> 
 *                  9          command or data  (can be chosen)
 *                  8          reset            (can be chosen)
 *                  7          chip select      (can be chosen)
 *
 * Author       :  Richard Ulrich <richi@paraeasy.ch>
 *
 * Credit       :  Fandi Gunawan <fandigunawan@gmail.com>
 *                 Sylvain Bissonette (2003)
 *                 Louis Frigon (2003)
 * License      :  GPL v. 3
 */

#ifndef _NOKIA3310LCD_H_
#define _NOKIA3310LCD_H_

#include <avr/pgmspace.h>
#include <stdint.h>


class Nokia3310LCD
{
public:
    Nokia3310LCD(const uint8_t pinCmdDtaSw = 9, const uint8_t pinReset = 8, const uint8_t pinChipSel = 7);
    ~Nokia3310LCD();
    
    
    enum LcdCmdData
    {
         LCD_CMD  = 0,
         LCD_DATA = 1
    };

    enum LcdPixelMode
    {
        PIXEL_OFF =  0,
        PIXEL_ON  =  1,
        PIXEL_XOR =  2
    };
    
    enum LcdFontSize
    {
        FONT_1X = 1,
        FONT_2X = 2
    }; 
    
    enum RETVAL
    {
        OK            = 0,
        OUT_OF_BORDER = 1,
        OK_WITH_WRAP  = 2
    };
    
    void init();
    void LcdClear();
    void LcdUpdate();
    void LcdImage(const uint8_t *imageData);
    void LcdContrast(uint8_t contrast);
    RETVAL LcdGotoXYFont(uint8_t x, uint8_t y);
    RETVAL LcdChr(LcdFontSize size, uint8_t ch);
    RETVAL LcdStr(LcdFontSize size, const char* dataArray);
    RETVAL LcdFStr(LcdFontSize size, const uint8_t *dataPtr);
    RETVAL LcdPixel(uint8_t x, uint8_t y, LcdPixelMode mode);
    RETVAL LcdLine(uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2, LcdPixelMode mode);
    RETVAL LcdRect(uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2, LcdPixelMode mode);
    RETVAL LcdSingleBar(uint8_t baseX, uint8_t baseY, uint8_t height, uint8_t width, LcdPixelMode mode);
    RETVAL LcdBars(uint8_t data[], uint8_t numbBars, uint8_t width, uint8_t multiplier);

private:
    void LcdSend(uint8_t data, LcdCmdData cd);
       
    const uint8_t pinCmdDtaSw_; // command / data switch
    const uint8_t pinReset_;    // active low reset
    const uint8_t pinChipSel_;  // chip select
  
    static const uint8_t  LCD_X_RES        = 84; // x resolution
    static const uint8_t  LCD_Y_RES        = 48; // y resolution
    static const uint8_t  EMPTY_SPACE_BARS =  2;
    static const uint8_t  BAR_X            =  5;
    static const uint8_t  BAR_Y            = 38;
    static const uint16_t LCD_CACHE_SIZE   = LCD_X_RES * LCD_Y_RES / 8; // = 504 bytes
    
    // state     
    uint8_t LcdCache[LCD_CACHE_SIZE];  // Cache buffer in SRAM 84*48 bits or 504 uint8_ts */
    int     LcdCacheIdx;               // Cache index
    int     LoWaterMark;               // Lower part of water mark
    int     HiWaterMark;               // Higher part of water mark
    bool    UpdateLcd;                 // Variable to decide whether update Lcd Cache is active/nonactive
};



/*
 * Character lookup table code was taken from the work of Sylvain Bissonette
 * This table defines the standard ASCII characters in a 5x7 dot format.
 */
static const unsigned char FontLookup [][5] PROGMEM =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00 },   /* space */
    { 0x00, 0x00, 0x2f, 0x00, 0x00 },   /* ! */
    { 0x00, 0x07, 0x00, 0x07, 0x00 },   /* " */
    { 0x14, 0x7f, 0x14, 0x7f, 0x14 },   /* # */
    { 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   /* $ */
    { 0xc4, 0xc8, 0x10, 0x26, 0x46 },   /* % */
    { 0x36, 0x49, 0x55, 0x22, 0x50 },   /* & */
    { 0x00, 0x05, 0x03, 0x00, 0x00 },   /* ' */
    { 0x00, 0x1c, 0x22, 0x41, 0x00 },   /* ( */
    { 0x00, 0x41, 0x22, 0x1c, 0x00 },   /* ) */
    { 0x14, 0x08, 0x3E, 0x08, 0x14 },   /* * */
    { 0x08, 0x08, 0x3E, 0x08, 0x08 },   /* + */
    { 0x00, 0x00, 0x50, 0x30, 0x00 },   /* , */
    { 0x10, 0x10, 0x10, 0x10, 0x10 },   /* - */
    { 0x00, 0x60, 0x60, 0x00, 0x00 },   /* . */
    { 0x20, 0x10, 0x08, 0x04, 0x02 },   /* / */
    { 0x3E, 0x51, 0x49, 0x45, 0x3E },   /* 0 */
    { 0x00, 0x42, 0x7F, 0x40, 0x00 },   /* 1 */
    { 0x42, 0x61, 0x51, 0x49, 0x46 },   /* 2 */
    { 0x21, 0x41, 0x45, 0x4B, 0x31 },   /* 3 */
    { 0x18, 0x14, 0x12, 0x7F, 0x10 },   /* 4 */
    { 0x27, 0x45, 0x45, 0x45, 0x39 },   /* 5 */
    { 0x3C, 0x4A, 0x49, 0x49, 0x30 },   /* 6 */
    { 0x01, 0x71, 0x09, 0x05, 0x03 },   /* 7 */
    { 0x36, 0x49, 0x49, 0x49, 0x36 },   /* 8 */
    { 0x06, 0x49, 0x49, 0x29, 0x1E },   /* 9 */
    { 0x00, 0x36, 0x36, 0x00, 0x00 },   /* : */
    { 0x00, 0x56, 0x36, 0x00, 0x00 },   /* ; */
    { 0x08, 0x14, 0x22, 0x41, 0x00 },   /* < */
    { 0x14, 0x14, 0x14, 0x14, 0x14 },   /* = */
    { 0x00, 0x41, 0x22, 0x14, 0x08 },   /* > */
    { 0x02, 0x01, 0x51, 0x09, 0x06 },   /* ? */
    { 0x32, 0x49, 0x59, 0x51, 0x3E },   /* @ */
    { 0x7E, 0x11, 0x11, 0x11, 0x7E },   /* A */
    { 0x7F, 0x49, 0x49, 0x49, 0x36 },   /* B */
    { 0x3E, 0x41, 0x41, 0x41, 0x22 },   /* C */
    { 0x7F, 0x41, 0x41, 0x22, 0x1C },   /* D */
    { 0x7F, 0x49, 0x49, 0x49, 0x41 },   /* E */
    { 0x7F, 0x09, 0x09, 0x09, 0x01 },   /* F */
    { 0x3E, 0x41, 0x49, 0x49, 0x7A },   /* G */
    { 0x7F, 0x08, 0x08, 0x08, 0x7F },   /* H */
    { 0x00, 0x41, 0x7F, 0x41, 0x00 },   /* I */
    { 0x20, 0x40, 0x41, 0x3F, 0x01 },   /* J */
    { 0x7F, 0x08, 0x14, 0x22, 0x41 },   /* K */
    { 0x7F, 0x40, 0x40, 0x40, 0x40 },   /* L */
    { 0x7F, 0x02, 0x0C, 0x02, 0x7F },   /* M */
    { 0x7F, 0x04, 0x08, 0x10, 0x7F },   /* N */
    { 0x3E, 0x41, 0x41, 0x41, 0x3E },   /* O */
    { 0x7F, 0x09, 0x09, 0x09, 0x06 },   /* P */
    { 0x3E, 0x41, 0x51, 0x21, 0x5E },   /* Q */
    { 0x7F, 0x09, 0x19, 0x29, 0x46 },   /* R */
    { 0x46, 0x49, 0x49, 0x49, 0x31 },   /* S */
    { 0x01, 0x01, 0x7F, 0x01, 0x01 },   /* T */
    { 0x3F, 0x40, 0x40, 0x40, 0x3F },   /* U */
    { 0x1F, 0x20, 0x40, 0x20, 0x1F },   /* V */
    { 0x3F, 0x40, 0x38, 0x40, 0x3F },   /* W */
    { 0x63, 0x14, 0x08, 0x14, 0x63 },   /* X */
    { 0x07, 0x08, 0x70, 0x08, 0x07 },   /* Y */
    { 0x61, 0x51, 0x49, 0x45, 0x43 },   /* Z */
    { 0x00, 0x7F, 0x41, 0x41, 0x00 },   /* [ */
    { 0x55, 0x2A, 0x55, 0x2A, 0x55 },   /* "Yen" */
    { 0x00, 0x41, 0x41, 0x7F, 0x00 },   /* ] */
    { 0x04, 0x02, 0x01, 0x02, 0x04 },   /* ^ */
    { 0x40, 0x40, 0x40, 0x40, 0x40 },   /* _ */
    { 0x00, 0x01, 0x02, 0x04, 0x00 },   /* ' */
    { 0x20, 0x54, 0x54, 0x54, 0x78 },   /* a */
    { 0x7F, 0x48, 0x44, 0x44, 0x38 },   /* b */
    { 0x38, 0x44, 0x44, 0x44, 0x20 },   /* c */
    { 0x38, 0x44, 0x44, 0x48, 0x7F },   /* d */
    { 0x38, 0x54, 0x54, 0x54, 0x18 },   /* e */
    { 0x08, 0x7E, 0x09, 0x01, 0x02 },   /* f */
    { 0x0C, 0x52, 0x52, 0x52, 0x3E },   /* g */
    { 0x7F, 0x08, 0x04, 0x04, 0x78 },   /* h */
    { 0x00, 0x44, 0x7D, 0x40, 0x00 },   /* i */
    { 0x20, 0x40, 0x44, 0x3D, 0x00 },   /* j */
    { 0x7F, 0x10, 0x28, 0x44, 0x00 },   /* k */
    { 0x00, 0x41, 0x7F, 0x40, 0x00 },   /* l */
    { 0x7C, 0x04, 0x18, 0x04, 0x78 },   /* m */
    { 0x7C, 0x08, 0x04, 0x04, 0x78 },   /* n */
    { 0x38, 0x44, 0x44, 0x44, 0x38 },   /* o */
    { 0x7C, 0x14, 0x14, 0x14, 0x08 },   /* p */
    { 0x08, 0x14, 0x14, 0x18, 0x7C },   /* q */
    { 0x7C, 0x08, 0x04, 0x04, 0x08 },   /* r */
    { 0x48, 0x54, 0x54, 0x54, 0x20 },   /* s */
    { 0x04, 0x3F, 0x44, 0x40, 0x20 },   /* t */
    { 0x3C, 0x40, 0x40, 0x20, 0x7C },   /* u */
    { 0x1C, 0x20, 0x40, 0x20, 0x1C },   /* v */
    { 0x3C, 0x40, 0x30, 0x40, 0x3C },   /* w */
    { 0x44, 0x28, 0x10, 0x28, 0x44 },   /* x */
    { 0x0C, 0x50, 0x50, 0x50, 0x3C },   /* y */
    { 0x44, 0x64, 0x54, 0x4C, 0x44 }    /* z */
};

#endif //  _NOKIA3310LCD_H_
